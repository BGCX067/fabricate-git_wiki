#summary How to subclass Builder to find dependencies some other way

== How to subclass Builder ==

If you'd like to find dependencies another way (not atimes or strace), or if you'd like to customise the Builder for some other reason, you can easily subclass `fabricate.Builder`.

For example, one way to find dependencies using gcc's -M options (instead of atimes or strace) would be to subclass `Builder` as shown below. *Note: this is just an example of subclassing Builder, not our recommendation. In most cases you can use the default Builder just fine.*

{{{
from fabricate import *

class GccBuilder(Builder):
    """ Builder subclass example that uses gcc's -M dependency generation if it
        can, otherwise defaults to the default "smart" dependency runner. """

    def is_gcc(self, command):
        """ Return True if command looks like a gcc command. """
        return 'gcc ' in command or 'gcc.exe' in command

    def runner(self, command):
        """ Run command using gcc dependency generation if it looks possible,
            otherwise use the default smart runner to find dependencies. """
        if self.is_gcc(command):
            return self.gcc_runner(command)
        else:
            return self.smart_runner(command)

    def gcc_runner(self, command):
        """ Run gcc command and return its dependencies and outputs. """
        if ' -c' in command:
            return self.gcc_compile_runner(command)
        else:
            return self.gcc_link_runner(command)

    def gcc_compile_runner(self, command):
        """ Run gcc compile command and return its list of dependencies and
            outputs, using gcc's -M options to determine dependencies. """
        deps_file = 'temp.d'
        command += ' -MMD -MF %s' % deps_file
        shell(command, silent=False)
        f = open(deps_file)
        try:
            target, deps_data = f.read().split(':', 1)
        finally:
            f.close()
        os.remove(deps_file)
        deps = []
        for line in deps_data.split('\n'):
            if line.endswith(' \\'):
                line = line[:-2]
            # temporarily replace spaces in filenames with a char that will
            # "never" occur
            line = line.replace('\\ ', '#')
            for dep in line.split():
                dep = dep.replace('#', ' ')
                deps.append(os.path.abspath(dep))
        outputs = [os.path.abspath(target)]
        return deps, outputs

    def gcc_link_runner(self, command):
        """ Run gcc link command and return its list of dependencies and
            outputs, using given gcc command to determine dependencies. """
        target = command.split('-o ')[1].split()[0]
        if sys.platform == 'win32' and not target.endswith('.exe'):
            target += '.exe'
        deps = []
        for word in command.split():
            if word.endswith('.o'):
                deps.append(os.path.abspath(word))
        shell(command, silent=False)
        outputs = [os.path.abspath(target)]
        return deps, outputs

# set up fabricate to use GccBuilder
setup(builder=GccBuilder)

# ... rest of your build script here, as normal ...
}}}