#summary Benchmarks of how fast fabricate is

These benchmarks were run using the benchmark.py script in the source tree. This script creates a bunch of C source and header files, and then when you tell it to build, it creates a fabricate build.py script which it runs using the given runner.

There's also a comparison against `make` for each platform.

== Windows ==

Tested using fabricate v1.17 (r118) on a Windows XP 32-bit system, compiles done with tcc (Tiny C Compiler). Number of sources/lines/headers/lines 100/1000/10/10000. Times below are normalized so !AlwaysRunner is 1.0:

|| *Runner* || *Time (normalized)* ||
|| !AlwaysRunner || 1.00 ||
|| !AtimesRunner first build || 1.05 ||
|| !AtimesRunner subsequent builds || 0.043 ||
|| make first build || 1.01 ||
|| make subsequent builds || 0.011 ||

== Linux ==

Tested using fabricate v1.17 (r118) on a Linux system (Huck), compiles done with gcc. Number of sources/lines/headers/lines 50/500/5/1000 (because gcc is so much slower than tcc!). Times below are normalized so !AlwaysRunner is 1.0:

|| *Runner* || *Time (normalized)* ||
|| !AlwaysRunner || 1.00 ||
|| !StraceRunner first build || 1.03 ||
|| !StraceRunner subsequent builds || 0.0026 ||
|| make first build || 0.96 ||
|| make subsequent builds || 0.00013 ||

== Linux with parallel jobs ==

COMING SOON